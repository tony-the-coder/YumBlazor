@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using YumBlazor.Utility
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />"
    </div>
}
else
{
    <div class="card shadow border m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>

                </div>
            </div>
        </div>
        <div class="card-body p-4">

            @if (OrderHeaders.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Phone Number</th>
                            <th>Email</th>
                            <th>Order Total</th>
                            <th>Order Date</th>
                            <th>Status</th>

                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var obj in OrderHeaders)
                        {
                            <tr>
                                <td>@obj.ID</td>
                                <td>@obj.Name</td>
                                <td>@obj.PhoneNumber</td>
                                <td>@obj.Email</td>
                                <td>@obj.OrderTotal.ToString("c")</td>
                                <td>@obj.OrderDate</td>
                                <td>@obj.Status</td>

                                <td>
                                    <a href="@($"order/details/{obj.ID}")" class="btn btn-sm btn-primary">
                                        <i class="bi bi-pencil-square"></i> Details
                                    </a>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-warning">
                    No Categories Found
                </div>
            }

        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();

    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }



    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrderHeader();
            IsProcessing = false;
            StateHasChanged();
        }
        // return base.OnAfterRenderAsync(firstRender);
    }

    //This method is used to load the order header and get Ids of the user 
    // and check if the user is an admin and have access to all orders, and if not only return the user's info.
    private async Task LoadOrderHeader()
    {
        IsProcessing = true;
        StateHasChanged();
        await CheckAuthorization(); 
        @if (IsAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(UserId);
        }

        
        // Load Categories
        IsProcessing = false;
    }

    private async Task CheckAuthorization()
    {

        if(AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            IsAdmin = user?.IsInRole(SD.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }
}
