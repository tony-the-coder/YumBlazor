@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using YumBlazor.Utility
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />"
    </div>
}
else
{
    <div class="card shadow border m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>

                </div>
            </div>
        </div>
        <div class="card-body p-4">

            @if (OrderHeaders.Any())
            {
                @* A nice column to display data with extra features like filters*@
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" 
                                AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" 
                                AllowSorting="true" PageSize="1" AllowPaging="true" 
                                PagerHorizontalAlign="HorizontalAlign.Left" 
                                ShowPagingSummary="true"
                                Data="@OrderHeaders" ColumnWidth="300px"
                                LogicalFilterOperator="LogicalFilterOperator.Or" 
                                SelectionMode="DataGridSelectionMode.Single">
                    <Columns>
                        <RadzenDataGridColumn Property="ID" Filterable="true" Title="ID" Frozen="true" Width="80px" />
                      
                      
                        <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" Width="120px" />
                        <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                        <RadzenDataGridColumn Property="Email" Title="EMail" Width="200px" />
                        <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width="120px" />
                        <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
                        <RadzenDataGridColumn Property="Status" Title="Status" Width="160px" />
                        <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            @*I think that this template makes it so I do not have to use a foreach*@
                            <Template Context="orderHeader">
                             <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary" 
                                Click="@(() => _navigationManager.NavigateTo($"order/details/{orderHeader.ID}"))">  
                                </RadzenButton>
                         </Template>
                         </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                
            }
            else
            {
                <div class="alert alert-warning">
                    No Categories Found
                </div>
            }

        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();

    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }



    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrderHeader();
            IsProcessing = false;
            StateHasChanged();
        }
        // return base.OnAfterRenderAsync(firstRender);
    }

    //This method is used to load the order header and get Ids of the user 
    // and check if the user is an admin and have access to all orders, and if not only return the user's info.
    private async Task LoadOrderHeader()
    {
        IsProcessing = true;
        StateHasChanged();
        await CheckAuthorization(); 
        @if (IsAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(UserId);
        }

        
        // Load Categories
        IsProcessing = false;
    }

    private async Task CheckAuthorization()
    {

        if(AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            IsAdmin = user?.IsInRole(SD.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }
}
