@page "/"
@using System.Globalization
@using YumBlazor.Services
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _js
@inject NavigationManager _NavigationManager
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IShoppingCartRepository _cartRepository
@inject SharedStateService _sharedStateService

<PageTitle>Home</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />"
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">
                @*Search Input Field*@
                <div class="d-flex align-items-center" style="width: 100%;">
                    @*This binds the search field to the FilterProductByName and executes
                        the else condition.
                    *@
                    <input type="text" class="form-control rounded-pill"
                    @bind:event="oninput" @bind:get="_searchText"
                    @bind:set="FilterProductByName"
                    placeholder="Search for Food Items!"
                    style="width: 100%; padding: 20px;">
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>
        
        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link @GetActiveTabClass(0) " href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
                </li>
                @*Loops through and displays the individual categories *@
                @foreach (var Category in Categories)
                {
                    <li class="nav-item">
                        @*Filters the category by link and displays the active category.*@
                        <span class="nav-link @GetActiveTabClass(Category.ID)" href="#" style="cursor: pointer" 
                        @onclick="()=>FilterProducts(Category.ID)">@Category.Name</span>
                    </li>
                }

            </ul>
            <div class="row mt-4 mx-1">
                @* The loading of every product *@
                @foreach (var prod in FilteredProducts)
                {

                    <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                        <div class="card">
                            <div class="mt-3 mb-2 row">
                                <div class="col-6 px-3">
                                    @if (!string.IsNullOrEmpty(prod.SpecialTag))
                                    {
                                        <i class="bi bi-star btn btn-outline-success disabled"> @prod.SpecialTag</i>
                                    }
                                </div>
                                <div class="col-6 text-end px-3 text-danger h3">
                                    @prod.Price.ToString("C")
                                </div>
                            </div>
                            <div class="text-center">
                                @if (!string.IsNullOrEmpty(prod.ImageUrl))
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@prod.ImageUrl" style="">
                                }
                                else
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style="">
                                }

                            </div>
                            <div class="card-body">
                                <h5 class="card-title text-center lead text-success">@prod.Name</h5>
                                <p class="card-text mt-2">@((MarkupString)@prod.Description)</p>
                                <h4 class="text-center">
                                    <div class="mg-lg-auto p-2" @onclick="()=>AddOrderItem(prod)">
                                        <i class="bi bi-cart3 btn btn-success text-right  px-5 form-control"> Add to cart</i>
                                    </div>
                                </h4>


                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    @*Create a list of products and categories*@
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    @*Created the list of filtered products*@

    private IEnumerable<Product> FilteredProducts = new List<Product>();
    private int _selectedCategoryID = 0;

    private string _searchText = "";
    private bool IsProcessing { get; set; } = true;

    @*Load the products and categories on first render*@
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        @* Load the products *@
        Products = await _productRepository.GetAllAsync();
        @* Load the categories *@
        Categories = await _categoryRepository.GetAllAsync();
        FilterProducts(0);

    }

    @*This is a method that filters the products *@
    private void FilterProducts(int categoryID)
    {
        if(categoryID == 0)
        {
            FilteredProducts = Products;
            _selectedCategoryID = categoryID;
            return;
        }
        @* Filter the products by category button on the page *@
        else {
            FilteredProducts = Products.Where(u => u.CategoryId == categoryID).ToList();
            _selectedCategoryID = categoryID;
            _searchText = String.Empty;
        }
    }
    private void FilterProductByName(string newValueOfSearchText)
    {
        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            FilteredProducts = Products;

        }
        else
        {
            @*Search function to filter products by name*@
            FilteredProducts = Products.Where(u => u.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
            _searchText = newValueOfSearchText;
        }
        _searchText = newValueOfSearchText;
    }

    @*For active selected link*@
    private string GetActiveTabClass(int categoryID)
    {
        return categoryID == _selectedCategoryID ? "active" : string.Empty;
    }


    private async Task AddOrderItem(Product product)
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;
        //Check if the user is authenticated
        if (!authenticated)
        {
            _NavigationManager.NavigateTo("Account/Login", true);
        }
        //Add the product to the cart
        else
        {
            var userID = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            var result = await 
            _cartRepository.UpdateCartAsync(userID, product.ID, 1);
            _sharedStateService.TotalCartCount = await _cartRepository.GetTotalCartCartCountAsync(userID);
            if(result)
            {
                _js?.ToastrSuccess("Product added to cart successfully");
            }
            else
            {
                _js?.ToastrError("Error Encountered");
            }
        }
       
    }
}