@inherits LayoutComponentBase
@using YumBlazor.Utility
@inject AuthenticationStateProvider AuthenticationStateProvider

@*A simple example on how AuthorizedView works which is how permissions 
        work in Blazor. 

<AuthorizeView> 
     Any authorized user
 </AuthorizeView>
     <AuthorizeView Roles="@SD.Role_Admin"> 
         Admin 
     </AuthorizeView> 
     <AuthorizeView Roles="@SD.Role_Customer"> 
         CUSTOMER 
     </AuthorizeView> *@

<div class="page">


    <AuthorizeView Roles="@SD.Role_Admin">
        @* This navbar will only show for logged in admins *@
        <div class="sidebar">
            <NavMenu />
        </div>
    </AuthorizeView>


    <main>
        @if(_navBarVisible){
        <NavBar></NavBar>
        }

        

      
            @Body
      
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>



@code{

    private bool _navBarVisible;
    protected override async Task OnInitializedAsync()
    {
        _navBarVisible = await ShowNavBar();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _navBarVisible = await ShowNavBar();
    }

    private async Task<bool> ShowNavBar()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;

        if (!authenticated)
        {
            return true;
        }
        //NavBar should not be displayed to admin user

        if (!user.IsInRole(SD.Role_Admin))
        {
            return true;
        }
        return false;
    }
}